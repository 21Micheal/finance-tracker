// src/pages/InsightsDashboard.jsx
import React, { useEffect, useState, useCallback } from "react";
import toast from "react-hot-toast";
import jsPDF from "jspdf";
import {
  Brain,
  Lightbulb,
  Loader2,
  FileDown,
  ChevronDown,
  ChevronUp,
  BarChart3,
  PiggyBank,
  AlertTriangle,
} from "lucide-react";

import { supabase } from "@/lib/supabaseClient";
import { useAuth } from "@/context/AuthContext";
import { fetchAllTransactions, generateAIInsights } from "@/lib/aiInsights";
import AlertsPanel from "@/components/AlertsPanel";

export default function InsightsDashboard({ currency = "USD" }) {
  const { user } = useAuth();

  // üßæ State
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);

  const [aiInsights, setAIInsights] = useState(null);
  const [aiLoading, setAILoading] = useState(false);
  const [aiError, setAIError] = useState("");
  const [expanded, setExpanded] = useState({
    trends: true,
    tips: false,
    summary: true,
  });

  // üîÅ Toggle expand/collapse of sections
  const toggleSection = useCallback(
    (section) => setExpanded((prev) => ({ ...prev, [section]: !prev[section] })),
    []
  );

  // üìä Fetch user transactions once
  useEffect(() => {
    const initializeDashboard = async () => {
      try {
        const { data } = await supabase.auth.getUser();
        if (!data?.user) {
          setTransactions([]);
          return;
        }

        const fetchedTransactions = await fetchAllTransactions();
        setTransactions(fetchedTransactions || []);
        if (fetchedTransactions?.length)
          console.log(`‚úÖ Loaded ${fetchedTransactions.length} transactions`);
      } catch (error) {
        console.error("Error loading dashboard:", error);
        toast.error("Failed to load dashboard data");
      } finally {
        setLoading(false);
      }
    };

    initializeDashboard();
  }, []);

  // üß† Generate AI Insights
  const handleGenerateInsights = useCallback(async () => {
    if (!transactions?.length) {
      setAIError("No transactions available to analyze.");
      return;
    }

    setAILoading(true);
    setAIError("");
    setAIInsights(null);

    try {
      const insightsData = await generateAIInsights(transactions, currency);
      if (!insightsData) throw new Error("No insights data returned.");

      const transformed = {
        trends:
          insightsData.spending_overview ||
          insightsData.trend_analysis ||
          "No trend data available.",
        tips:
          [
            ...(insightsData.recommendations || []),
            ...(insightsData.alerts || []),
          ].join("\n‚Ä¢ ") || "No tips available.",
        summary:
          insightsData.savings_analysis || "No summary information available.",
      };

      setAIInsights(transformed);
      toast.success("AI insights generated successfully!");
    } catch (err) {
      console.error("‚ùå AI Insights Error:", err);
      setAIError(err.message || "Failed to generate insights.");
      toast.error("AI insights generation failed.");
    } finally {
      setAILoading(false);
    }
  }, [transactions, currency]);

  // üßæ Export AI Insights as PDF
  const handleExportPDF = useCallback(() => {
    if (!aiInsights) return;

    const doc = new jsPDF();
    const margin = 14;
    let y = 20;

    doc.setFont("helvetica", "bold");
    doc.setTextColor(79, 70, 229);
    doc.setFontSize(18);
    doc.text("AI Financial Insights Report", margin, y);

    y += 12;
    doc.setFont("helvetica", "normal");
    doc.setTextColor(100, 116, 139);
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, margin, y);
    y += 6;
    doc.text(`Currency: ${currency}`, margin, y);
    y += 6;
    doc.text(`Transactions Analyzed: ${transactions.length}`, margin, y);

    y += 14;
    doc.setFontSize(12);
    doc.setTextColor(15, 23, 42);

    const addSection = (title, content) => {
      doc.setFont("helvetica", "bold");
      doc.text(title, margin, y);
      y += 8;
      doc.setFont("helvetica", "normal");
      const lines = doc.splitTextToSize(content || "No data available.", 180);
      doc.text(lines, margin, y);
      y += lines.length * 6 + 10;
    };

    addSection("üìà Spending Trends", aiInsights.trends);
    addSection("üí° Smart Recommendations", aiInsights.tips);
    addSection("üè¶ Financial Summary", aiInsights.summary);

    doc.setFontSize(8);
    doc.setTextColor(148, 163, 184);
    doc.text(
      "Generated by FinTrack AI Assistant",
      margin,
      doc.internal.pageSize.height - 10
    );

    doc.save(`Financial_Insights_${new Date().toISOString().split("T")[0]}.pdf`);
    toast.success("PDF report downloaded!");
  }, [aiInsights, currency, transactions]);

  // üåÄ Loading screen
  if (loading) {
    return (
      <div className="p-6 max-w-7xl mx-auto">
        <div className="flex items-center justify-center h-64">
          <Loader2 className="w-8 h-8 animate-spin text-indigo-600 mx-auto mb-4" />
          <p className="text-slate-600 dark:text-slate-400">
            Loading dashboard...
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-8 max-w-7xl mx-auto">
      {/* ===== Header ===== */}
      <header className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-extrabold text-slate-800 dark:text-slate-100 flex items-center gap-3">
            <Brain className="w-8 h-8 text-indigo-600 dark:text-indigo-400" />
            Advanced Financial Insights
          </h1>
          <p className="text-slate-600 dark:text-slate-400 mt-2">
            AI-powered analysis of your financial patterns and opportunities
          </p>
        </div>

        <div className="text-sm text-slate-500 dark:text-slate-400 bg-slate-100 dark:bg-slate-700 px-3 py-1 rounded-full">
          {transactions.length} transactions
        </div>
      </header>

      {/* ===== AI INSIGHTS PANEL ===== */}
      <section className="bg-white dark:bg-slate-800 rounded-2xl shadow-lg border border-indigo-100 dark:border-slate-700">
        <div className="p-6 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center">
          <h2 className="text-xl font-semibold text-slate-800 dark:text-slate-100 flex items-center gap-3">
            <Brain className="w-6 h-6 text-indigo-600 dark:text-indigo-400" />
            AI Financial Analysis
          </h2>

          {aiInsights && (
            <button
              onClick={handleExportPDF}
              className="flex items-center gap-2 px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700 transition"
            >
              <FileDown className="w-4 h-4" /> Export PDF
            </button>
          )}
        </div>

        <div className="p-6">
          <p className="text-sm text-slate-600 dark:text-slate-400 mb-6">
            Get AI-powered analysis of your spending trends, savings behavior,
            and opportunities for optimization.
          </p>

          {/* Generate Button */}
          <button
            onClick={handleGenerateInsights}
            disabled={aiLoading || !transactions.length}
            className="bg-indigo-600 hover:bg-indigo-700 text-white flex items-center gap-2 px-4 py-3 rounded-lg disabled:opacity-50 mb-6 transition"
          >
            {aiLoading ? (
              <>
                <Loader2 className="w-4 h-4 animate-spin" /> Generating Insights...
              </>
            ) : (
              <>
                <Lightbulb className="w-4 h-4" /> Generate AI Insights
              </>
            )}
          </button>

          {/* Errors */}
          {aiError && (
            <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl flex items-start gap-2">
              <AlertTriangle className="w-4 h-4 text-red-500 mt-0.5" />
              <span className="text-sm text-red-700 dark:text-red-400">
                {aiError}
              </span>
            </div>
          )}

          {/* Empty State */}
          {!transactions.length && (
            <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-700 rounded-xl p-4 mb-6">
              <p className="text-amber-800 dark:text-amber-300 text-sm">
                <strong>No transactions available.</strong> Add some to generate
                AI insights.
              </p>
            </div>
          )}

          {/* AI Insights Display */}
          {aiInsights ? (
            <div className="space-y-4 animate-fadeIn">
              {[
                {
                  key: "trends",
                  title: "Spending Trends & Patterns",
                  icon: <BarChart3 className="w-5 h-5" />,
                  color: "indigo",
                  content: aiInsights.trends,
                },
                {
                  key: "tips",
                  title: "Smart Recommendations",
                  icon: <Lightbulb className="w-5 h-5" />,
                  color: "green",
                  content: aiInsights.tips,
                },
                {
                  key: "summary",
                  title: "Financial Summary",
                  icon: <PiggyBank className="w-5 h-5" />,
                  color: "slate",
                  content: aiInsights.summary,
                },
              ].map(({ key, title, icon, color, content }) => (
                <div
                  key={key}
                  className={`rounded-xl border p-4 bg-gradient-to-br from-${color}-50 to-white dark:from-slate-800 dark:to-slate-900 dark:border-slate-700`}
                >
                  <div
                    onClick={() => toggleSection(key)}
                    className="flex justify-between items-center cursor-pointer mb-2"
                  >
                    <h4
                      className={`font-semibold flex items-center gap-2 text-${color}-600 dark:text-${color}-400`}
                    >
                      {icon} {title}
                    </h4>
                    {expanded[key] ? (
                      <ChevronUp className="w-4 h-4" />
                    ) : (
                      <ChevronDown className="w-4 h-4" />
                    )}
                  </div>
                  {expanded[key] && (
                    <p className="text-sm text-slate-700 dark:text-slate-200 whitespace-pre-wrap leading-relaxed">
                      {content}
                    </p>
                  )}
                </div>
              ))}
            </div>
          ) : (
            !aiLoading && transactions.length > 0 && (
              <div className="text-center py-8 bg-slate-50 dark:bg-slate-700/50 rounded-xl">
                <Brain className="w-12 h-12 text-slate-400 mx-auto mb-3" />
                <h3 className="text-lg font-semibold text-slate-600 dark:text-slate-400 mb-2">
                  Ready for Analysis
                </h3>
                <p className="text-slate-500 dark:text-slate-500">
                  Click ‚ÄúGenerate AI Insights‚Äù to analyze your{" "}
                  {transactions.length} transactions.
                </p>
              </div>
            )
          )}
        </div>
      </section>

      {/* ===== Alerts Section ===== */}
      <section className="bg-white dark:bg-slate-800 p-6 rounded-2xl shadow-lg border border-slate-200 dark:border-slate-700">
        <h2 className="text-xl font-bold text-red-600 dark:text-red-400 flex items-center gap-2 mb-4">
          <AlertTriangle className="w-5 h-5" /> Financial Alerts
        </h2>
        <AlertsPanel />
        <p className="text-sm text-slate-500 dark:text-slate-400 mt-4 pt-3 border-t dark:border-slate-700">
          Personalized alerts are generated based on your financial history and
          activity.
        </p>
      </section>
    </div>
  );
}
